import postcss, { Builder, Node, Stringifier } from 'postcss';
import { generate } from 'short-uuid';
import { buildImportInjectStylesStatement } from './builders/import-statement';
import {
    buildInstantStylesStatement,
    buildLazyStylesStatement,
    buildOnDemandStylesStatement
} from './builders/styles-statement';
import { Options } from './options';
import { readCodeForEmbed } from './utils/read-code-for-embed';
import { prepareRuntimeOptions } from './utils/runtime-options';


let embedCode: string | undefined;

export const createStringify = (options: Required<Options>): Stringifier => {

    const { attachOriginalClassName } = options.modules;
    const { script, scriptType, moduleType, custom } = options.inject;
    const { importStatement, injectStatement } = custom || {};

    const runtimeOptions = prepareRuntimeOptions(options);

    return (node: Node, builder: Builder) => {
        if (node.type === 'root') {
            let classMap: Record<string, string> | undefined;
            // looking for module-map comment
            node.walkComments(comment => {
                const cmt = comment.text;
                if (cmt.startsWith('modules-map:')) {
                    classMap = JSON.parse(cmt.replace('modules-map:', ''));
                }
            });
            // we handling only roots which contains module-map
            if (classMap) {
                // generate stylesheet unique key
                const sheetKey = generate();
                // clone for removing comments, as we do not want to touch original root
                const cloned = node.clone();
                cloned.walkComments(c => c.remove());
                // header text
                builder(`// File generated by the postcss-es-modules plugin. Please do not modify it !!!\n`)

                if (options.inject.injectMode !== 'none') {
                    // if not none injectMode
                    // import statement
                    if (importStatement) {
                        // if there is custom importStatement, we will use it
                        builder(importStatement, cloned)
                    } else {

                        if (script === 'embed') {
                            // if we have to embed injector code
                            if (!embedCode) {
                                // if code to inject is not loaded yet
                                // we will read it
                                embedCode = readCodeForEmbed(scriptType, moduleType);
                            }
                            // print in the injector code
                            builder(embedCode, node);
                        } else {
                            // if not embedding, we will import the css-es-modules lib
                            buildImportInjectStylesStatement(cloned, builder, options.inject);
                        }
                    }
                }

                // if there are custom runtime options
                // we will add them to runtime
                if (runtimeOptions) {
                    builder(`const options = ${JSON.stringify(runtimeOptions)};\n`)
                }

                // key of stylesheet
                builder(`const key = '${sheetKey}';\n`, cloned);

                // raw css body
                builder('const css =`', cloned);
                postcss.stringify(cloned, builder);
                builder('`;\n', cloned);

                // styles object
                if (options.inject.injectMode === 'instant') {
                    buildInstantStylesStatement(
                        builder, cloned, classMap, injectStatement, !!attachOriginalClassName, !!runtimeOptions);
                } else if (options.inject.injectMode === 'ondemand') {
                    buildOnDemandStylesStatement(
                        builder, cloned, classMap, injectStatement, !!attachOriginalClassName, !!runtimeOptions);
                } else if (options.inject.injectMode === 'none') {
                    buildOnDemandStylesStatement(
                        builder, cloned, classMap,
                        "throw \"This stylesheet can't be injected, instead please use exported css constant.\"",
                        !!attachOriginalClassName, !!runtimeOptions);
                } else {
                    buildLazyStylesStatement(
                        builder, cloned, classMap, injectStatement, !!attachOriginalClassName, !!runtimeOptions);
                }

                // export statement
                if (moduleType === 'esm') {
                    builder(`export { styles, css, key };\n`, cloned);
                    builder(`export default styles;\n`, cloned);
                } else {
                    builder(`module.exports = { styles, css, key, default: styles };\n`, cloned);
                }

                return;
            }
        }

        // in any other case we will use default stringify
        postcss.stringify(node, builder);
    }
}
